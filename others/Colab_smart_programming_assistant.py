# -*- coding: utf-8 -*-
"""
# ü§ñ Tr·ª£ L√Ω L·∫≠p Tr√¨nh Th√¥ng Minh v1.1 
### Smart Programming Assistant
"""

# ===== PH·∫¶N C√ÄI ƒê·∫∂T TH∆Ø VI·ªÜN =====
!pip install -q google-generativeai tiktoken pytest

# Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import os
import sys
import tempfile
import zipfile
import io
import difflib
import re
import json
import time
import subprocess
import unittest
from pathlib import Path
from typing import List, Dict, Any, Tuple, Optional, Union
from IPython.display import HTML, display, Markdown, clear_output
import google.generativeai as genai
import tiktoken
import pytest
import traceback

# ===== PH·∫¶N C·∫§U H√åNH =====

class Config:
    """L·ªõp ch·ª©a c√°c c·∫•u h√¨nh cho ·ª©ng d·ª•ng"""
    # C√°c ng√¥n ng·ªØ ƒë∆∞·ª£c h·ªó tr·ª£
    SUPPORTED_LANGUAGES = ["c", "python"]
    
    # C·∫•u h√¨nh m√¥ h√¨nh
    MODEL_NAME = "models/gemini-1.5-pro-latest"  # M√¥ h√¨nh 1M token
    TEMPERATURE = 0.2
    MAX_OUTPUT_TOKENS = 8192
    TOP_P = 0.95
    TOP_K = 64
    
    # C·∫•u h√¨nh hi·ªÉn th·ªã
    DEFAULT_DETAIL_LEVEL = "medium"  # low, medium, high
    MAX_CONTEXT_LENGTH = 900000  # Gi·ªõi h·∫°n ng·ªØ c·∫£nh ƒë·ªÉ t·ªëi ∆∞u token
    
    # ƒê∆∞·ªùng d·∫´n m·∫∑c ƒë·ªãnh
    TEMP_DIR = tempfile.mkdtemp()

# ===== PH·∫¶N TI·ªÜN √çCH =====

class Utils:
    """C√°c h√†m ti·ªán √≠ch"""
    
    @staticmethod
    def count_tokens(text: str) -> int:
        """ƒê·∫øm s·ªë l∆∞·ª£ng token trong text"""
        encoder = tiktoken.encoding_for_model("gpt-4")  # S·ª≠ d·ª•ng encoder c·ªßa GPT-4 ƒë·ªÉ ∆∞·ªõc l∆∞·ª£ng
        return len(encoder.encode(text))
    
    @staticmethod
    def read_file(filepath: str) -> str:
        """ƒê·ªçc n·ªôi dung file vƒÉn b·∫£n"""
        try:
            with open(filepath, 'r', encoding='utf-8') as file:
                return file.read()
        except Exception as e:
            return f"Error reading file: {str(e)}"
    
    @staticmethod
    def write_file(filepath: str, content: str) -> bool:
        """Ghi n·ªôi dung v√†o file"""
        try:
            with open(filepath, 'w', encoding='utf-8') as file:
                file.write(content)
            return True
        except Exception as e:
            print(f"Error writing file: {str(e)}")
            return False
    
    @staticmethod
    def extract_code_from_markdown(text: str) -> str:
        """Tr√≠ch xu·∫•t code t·ª´ markdown"""
        pattern = r"```(?:\w+)?\s*([\s\S]*?)\s*```"
        matches = re.findall(pattern, text)
        if matches:
            return "\n".join(matches)
        return text
    
    @staticmethod
    def compare_code_versions(old_code: str, new_code: str) -> str:
        """So s√°nh hai phi√™n b·∫£n code v√† tr·∫£ v·ªÅ diff d∆∞·ªõi d·∫°ng text"""
        diff = difflib.unified_diff(
            old_code.splitlines(keepends=True),
            new_code.splitlines(keepends=True),
            fromfile="old_version",
            tofile="new_version"
        )
        return ''.join(diff)
    
    @staticmethod
    def create_displayable_diff(old_code: str, new_code: str) -> str:
        """T·∫°o diff ƒë·∫πp ƒë·ªÉ hi·ªÉn th·ªã tr√™n notebook"""
        diff = difflib.ndiff(old_code.splitlines(), new_code.splitlines())
        result = []
        
        for line in diff:
            if line.startswith('+ '):
                result.append(f"<span style='color: green'>{line}</span>")
            elif line.startswith('- '):
                result.append(f"<span style='color: red'>{line}</span>")
            elif line.startswith('? '):
                continue
            else:
                result.append(line)
        
        return '<br>'.join(result)

    @staticmethod
    def unzip_file(zip_path: str, extract_to: str) -> List[str]:
        """Gi·∫£i n√©n file zip v√† tr·∫£ v·ªÅ danh s√°ch c√°c file ƒë∆∞·ª£c gi·∫£i n√©n"""
        extracted_files = []
        try:
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(extract_to)
                extracted_files = zip_ref.namelist()
        except Exception as e:
            print(f"Error extracting zip file: {str(e)}")
        
        return extracted_files

    @staticmethod
    def get_relevant_language_files(directory: str, language: str) -> List[str]:
        """T√¨m c√°c file c·ªßa ng√¥n ng·ªØ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh trong th∆∞ m·ª•c"""
        extensions = {
            "c": [".c", ".h"],
            "python": [".py"]
        }
        
        if language not in extensions:
            return []
        
        relevant_files = []
        
        for root, _, files in os.walk(directory):
            for file in files:
                for ext in extensions[language]:
                    if file.endswith(ext):
                        relevant_files.append(os.path.join(root, file))
        
        return relevant_files

# ===== PH·∫¶N C·ªêT L√ïI =====

class GeminiClient:
    """X·ª≠ l√Ω t∆∞∆°ng t√°c v·ªõi Gemini API"""
    
    def __init__(self, api_key: str):
        """Kh·ªüi t·∫°o client v·ªõi API key"""
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel(
            model_name=Config.MODEL_NAME,
            generation_config={
                "temperature": Config.TEMPERATURE,
                "max_output_tokens": Config.MAX_OUTPUT_TOKENS,
                "top_p": Config.TOP_P,
                "top_k": Config.TOP_K
            }
        )
        self.conversation = self.model.start_chat(history=[])
    
    def query(self, prompt: str) -> str:
        """G·ª≠i prompt v√† nh·∫≠n ph·∫£n h·ªìi t·ª´ model"""
        try:
            response = self.conversation.send_message(prompt)
            return response.text
        except Exception as e:
            error_msg = f"Error querying Gemini API: {str(e)}"
            print(error_msg)
            return error_msg
    
    def add_to_history(self, role: str, content: str):
        """Th√™m tin nh·∫Øn v√†o l·ªãch s·ª≠ h·ªôi tho·∫°i"""
        # Th√™m tin nh·∫Øn v√†o l·ªãch s·ª≠
        if role.lower() == "user":
            self.conversation.history.append({"role": "user", "parts": [content]})
        elif role.lower() == "model":
            self.conversation.history.append({"role": "model", "parts": [content]})
    
    def clear_history(self):
        """X√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i"""
        self.conversation = self.model.start_chat(history=[])
    
    def get_token_count(self) -> int:
        """∆Ø·ªõc t√≠nh s·ªë l∆∞·ª£ng token trong l·ªãch s·ª≠ h·ªôi tho·∫°i"""
        full_text = ""
        for message in self.conversation.history:
            if isinstance(message["parts"], list):
                for part in message["parts"]:
                    if isinstance(part, str):
                        full_text += part
                    elif hasattr(part, "text"):
                        full_text += part.text
            elif isinstance(message["parts"], str):
                full_text += message["parts"]
        
        return Utils.count_tokens(full_text)
    
    def optimize_context(self):
        """T·ªëi ∆∞u ng·ªØ c·∫£nh khi qu√° d√†i"""
        token_count = self.get_token_count()
        
        if token_count > Config.MAX_CONTEXT_LENGTH:
            # Gi·ªØ l·∫°i tin nh·∫Øn ƒë·∫ßu ti√™n (system prompt) v√† n·ª≠a sau c·ªßa l·ªãch s·ª≠
            retain_count = len(self.conversation.history) // 2
            self.conversation.history = [
                self.conversation.history[0],
                *self.conversation.history[-retain_count:]
            ]
            print(f"Context optimized. Retained {retain_count+1} messages.")

class CodeExecutor:
    """Th·ª±c thi v√† ph√¢n t√≠ch m√£ ngu·ªìn"""
    
    @staticmethod
    def execute_python(code: str, input_data: str = "") -> Dict[str, Any]:
        """Th·ª±c thi m√£ Python v√† tr·∫£ v·ªÅ k·∫øt qu·∫£"""
        result = {
            "output": "",
            "error": None,
            "status": "success"
        }
        
        try:
            # T·∫°o file t·∫°m th·ªùi ƒë·ªÉ th·ª±c thi
            temp_file = os.path.join(Config.TEMP_DIR, "temp_code.py")
            Utils.write_file(temp_file, code)
            
            # Th·ª±c thi file python v·ªõi input_data n·∫øu c√≥
            process = subprocess.Popen(
                [sys.executable, temp_file],
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            stdout, stderr = process.communicate(input=input_data, timeout=30)
            
            result["output"] = stdout
            if stderr:
                result["error"] = stderr
                result["status"] = "error"
            
        except subprocess.TimeoutExpired:
            result["error"] = "Execution timed out (30s limit)"
            result["status"] = "timeout"
        except Exception as e:
            result["error"] = str(e)
            result["status"] = "error"
        
        return result
    
    @staticmethod
    def compile_and_execute_c(code: str, input_data: str = "") -> Dict[str, Any]:
        """Bi√™n d·ªãch v√† th·ª±c thi m√£ C v√† tr·∫£ v·ªÅ k·∫øt qu·∫£"""
        result = {
            "output": "",
            "error": None,
            "compilation_error": None,
            "status": "success"
        }
        
        try:
            # T·∫°o file t·∫°m th·ªùi ƒë·ªÉ th·ª±c thi
            temp_c_file = os.path.join(Config.TEMP_DIR, "temp_code.c")
            temp_exe_file = os.path.join(Config.TEMP_DIR, "temp_code")
            
            Utils.write_file(temp_c_file, code)
            
            # Bi√™n d·ªãch m√£ C
            compile_process = subprocess.Popen(
                ["gcc", temp_c_file, "-o", temp_exe_file],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            _, compile_stderr = compile_process.communicate(timeout=30)
            
            if compile_process.returncode != 0:
                result["compilation_error"] = compile_stderr
                result["status"] = "compilation_error"
                return result
            
            # Th·ª±c thi ch∆∞∆°ng tr√¨nh sau khi bi√™n d·ªãch
            if os.path.exists(temp_exe_file):
                run_process = subprocess.Popen(
                    [temp_exe_file],
                    stdin=subprocess.PIPE,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True
                )
                
                stdout, stderr = run_process.communicate(input=input_data, timeout=30)
                
                result["output"] = stdout
                if stderr:
                    result["error"] = stderr
                    result["status"] = "runtime_error"
            else:
                result["error"] = "Executable not found after compilation"
                result["status"] = "error"
            
        except subprocess.TimeoutExpired:
            result["error"] = "Execution timed out (30s limit)"
            result["status"] = "timeout"
        except Exception as e:
            result["error"] = str(e)
            result["status"] = "error"
        
        return result
    
    @staticmethod
    def run_code(language: str, code: str, input_data: str = "") -> Dict[str, Any]:
        """Ch·∫°y m√£ ngu·ªìn d·ª±a v√†o ng√¥n ng·ªØ v√† tr·∫£ v·ªÅ k·∫øt qu·∫£"""
        if language.lower() == "python":
            return CodeExecutor.execute_python(code, input_data)
        elif language.lower() == "c":
            return CodeExecutor.compile_and_execute_c(code, input_data)
        else:
            return {
                "output": "",
                "error": f"Unsupported language: {language}",
                "status": "error"
            }
    
    @staticmethod
    def generate_test_cases(language: str, code: str, description: str) -> Dict[str, str]:
        """Sinh test case d·ª±a v√†o m√¥ t·∫£ y√™u c·∫ßu v√† m√£ ngu·ªìn"""
        test_cases = {}
        
        if language.lower() == "python":
            # T·∫°o file t·∫°m th·ªùi
            module_name = "temp_code"
            temp_file = os.path.join(Config.TEMP_DIR, f"{module_name}.py")
            Utils.write_file(temp_file, code)
            
            # T·∫°o test file
            test_file_content = f"""
import unittest
import sys
from pathlib import Path
import importlib.util

# Import module c·∫ßn test
sys.path.append('{Config.TEMP_DIR}')
spec = importlib.util.spec_from_file_location("{module_name}", "{temp_file}")
module = importlib.util.module_from_spec(spec)
spec.loader.exec_module(module)

class TestGeneratedCases(unittest.TestCase):
    # Test cases s·∫Ω ƒë∆∞·ª£c th√™m ·ªü ƒë√¢y
    
    def test_basic_functionality(self):
        # ƒê√¢y l√† test case c∆° b·∫£n
        pass

if __name__ == '__main__':
    unittest.main()
"""
            test_file = os.path.join(Config.TEMP_DIR, f"test_{module_name}.py")
            Utils.write_file(test_file, test_file_content)
            
            test_cases = {
                "unit_test": test_file_content,
                "pytest": f"# Pytest cho {module_name}\n\n# S·∫Ω th√™m test cases\n\ndef test_basic():\n    # Test case c∆° b·∫£n\n    pass"
            }
        
        elif language.lower() == "c":
            # T·∫°o file test c∆° b·∫£n cho C
            test_file_content = """
#include <stdio.h>
#include <assert.h>

// Test cases cho ch∆∞∆°ng tr√¨nh C
void run_tests() {
    // C√°c test case s·∫Ω ƒë∆∞·ª£c th√™m ·ªü ƒë√¢y
    printf("Running tests...\n");
    
    // Test case m·∫´u
    // assert(function_to_test(input) == expected_output);
    
    printf("All tests passed!\n");
}

int main() {
    run_tests();
    return 0;
}
"""
            test_file = os.path.join(Config.TEMP_DIR, "test_program.c")
            Utils.write_file(test_file, test_file_content)
            
            test_cases = {
                "assert_tests": test_file_content
            }
        
        return test_cases

class CodeAnalyzer:
    """Ph√¢n t√≠ch m√£ ngu·ªìn v√† t√¨m l·ªói"""
    
    def __init__(self, gemini_client: GeminiClient):
        """Kh·ªüi t·∫°o v·ªõi client Gemini"""
        self.gemini_client = gemini_client
    
    def analyze_code(self, language: str, code: str, requirement: str) -> Dict[str, Any]:
        """Ph√¢n t√≠ch m√£ ngu·ªìn v√† tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt"""
        
        # 1. Ph√¢n t√≠ch l·ªói c√∫ ph√°p
        syntax_result = self._check_syntax(language, code)
        
        # 2. Ch·∫°y code ƒë·ªÉ t√¨m runtime errors
        execution_result = CodeExecutor.run_code(language, code)
        
        # 3. Ph√¢n t√≠ch code d·ª±a v√†o y√™u c·∫ßu v√† k·∫øt qu·∫£ ·ªü tr√™n
        analysis_prompt = f"""
# Y√äU C·∫¶U PH√ÇN T√çCH M√É NGU·ªíN 

## Ng√¥n ng·ªØ: {language}

## M√¥ t·∫£ y√™u c·∫ßu:
{requirement}

## M√£ ngu·ªìn c·∫ßn ph√¢n t√≠ch:
```{language}
{code}
```

## Th√¥ng tin th√™m:
- K·∫øt qu·∫£ ki·ªÉm tra c√∫ ph√°p: {syntax_result["status"]}
- Chi ti·∫øt l·ªói c√∫ ph√°p: {syntax_result.get("error", "Kh√¥ng c√≥")}
- K·∫øt qu·∫£ th·ª±c thi: {execution_result["status"]}
- Output: {execution_result.get("output", "Kh√¥ng c√≥")}
- Runtime error: {execution_result.get("error", "Kh√¥ng c√≥")}
- L·ªói bi√™n d·ªãch (cho C): {execution_result.get("compilation_error", "Kh√¥ng √°p d·ª•ng")}

## Y√äU C·∫¶U PH√ÇN T√çCH:
1. Ph√¢n t√≠ch ch√≠nh x√°c d·ª±a tr√™n c√°c l·ªói ƒë√£ ph√°t hi·ªán 
2. ƒê√°nh gi√° m√£ ngu·ªìn so v·ªõi y√™u c·∫ßu ƒë·ªÅ b√†i
3. Nh·∫≠n di·ªán v√† gi·∫£i th√≠ch c√°c l·ªói c√∫ ph√°p, l·ªói logic, v√† runtime errors
4. ƒê·ªÅ xu·∫•t c√°ch s·ª≠a c·ª• th·ªÉ cho t·ª´ng l·ªói
5. ƒê√°nh gi√° ƒë·ªô hi·ªáu qu·∫£ c·ªßa gi·∫£i ph√°p v√† t·ªëi ∆∞u h√≥a n·∫øu c·∫ßn

## ƒê·ªäNH D·∫†NG PH·∫¢N H·ªíI:
T·∫°o ph·∫£n h·ªìi d∆∞·ªõi d·∫°ng JSON v·ªõi c√°c tr∆∞·ªùng:
- "syntax_issues": [danh s√°ch c√°c v·∫•n ƒë·ªÅ c√∫ ph√°p, m·ªói m·ª•c g·ªìm "line", "description", "fix"]
- "logic_issues": [danh s√°ch c√°c v·∫•n ƒë·ªÅ logic, m·ªói m·ª•c g·ªìm "description", "affected_lines", "fix"]
- "runtime_issues": [danh s√°ch c√°c v·∫•n ƒë·ªÅ runtime, m·ªói m·ª•c g·ªìm "description", "fix"]
- "requirement_compliance": ƒë√°nh gi√° m·ª©c ƒë·ªô ƒë√°p ·ª©ng y√™u c·∫ßu (0-100%)
- "optimizations": [ƒë·ªÅ xu·∫•t t·ªëi ∆∞u h√≥a]
- "suggested_fixes": m√£ ngu·ªìn ƒë√£ ƒë∆∞·ª£c s·ª≠a ho√†n ch·ªânh
- "explanation": di·ªÖn gi·∫£i t·ªïng quan v·ªÅ c√°c v·∫•n ƒë·ªÅ v√† gi·∫£i ph√°p

Tr·∫£ v·ªÅ K·∫æT QU·∫¢ d∆∞·ªõi ƒë·ªãnh d·∫°ng JSON H·ª¢P L·ªÜ.
"""
        
        analysis_response = self.gemini_client.query(analysis_prompt)
        
        # Tr√≠ch xu·∫•t ph·∫£n h·ªìi JSON t·ª´ k·∫øt qu·∫£
        try:
            # T√¨m JSON trong ph·∫£n h·ªìi
            json_match = re.search(r'```json\s*([\s\S]*?)\s*```', analysis_response)
            if json_match:
                json_str = json_match.group(1)
            else:
                # N·∫øu kh√¥ng t√¨m th·∫•y trong code block, th·ª≠ l·∫•y to√†n b·ªô n·ªôi dung
                json_str = analysis_response
            
            # Parse JSON
            analysis_result = json.loads(json_str)
        except json.JSONDecodeError:
            # N·∫øu kh√¥ng parse ƒë∆∞·ª£c, tr·∫£ v·ªÅ k·∫øt qu·∫£ d·∫°ng text
            analysis_result = {
                "syntax_issues": [],
                "logic_issues": [],
                "runtime_issues": [],
                "requirement_compliance": "Unknown",
                "optimizations": [],
                "suggested_fixes": code,  # Gi·ªØ nguy√™n code
                "explanation": analysis_response  # S·ª≠ d·ª•ng to√†n b·ªô ph·∫£n h·ªìi l√†m gi·∫£i th√≠ch
            }
        
        return {
            "syntax_check": syntax_result,
            "execution_result": execution_result,
            "analysis": analysis_result
        }
    
    def _check_syntax(self, language: str, code: str) -> Dict[str, Any]:
        """Ki·ªÉm tra l·ªói c√∫ ph√°p c·ªßa m√£ ngu·ªìn"""
        result = {
            "status": "success",
            "error": None
        }
        
        if language.lower() == "python":
            try:
                compile(code, "<string>", "exec")
            except SyntaxError as e:
                result["status"] = "error"
                result["error"] = str(e)
                result["line"] = e.lineno
                result["offset"] = e.offset
                result["text"] = e.text
        
        elif language.lower() == "c":
            # T·∫°o file t·∫°m th·ªùi
            temp_file = os.path.join(Config.TEMP_DIR, "syntax_check.c")
            Utils.write_file(temp_file, code)
            
            # Ch·ªâ ki·ªÉm tra c√∫ ph√°p m√† kh√¥ng bi√™n d·ªãch
            process = subprocess.Popen(
                ["gcc", "-fsyntax-only", temp_file],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            _, stderr = process.communicate()
            
            if stderr:
                result["status"] = "error"
                result["error"] = stderr
        
        return result
    
    def simulate_execution(self, language: str, code: str, detail_level: str = "medium") -> str:
        """M√¥ ph·ªèng th·ª±c thi m√£ ngu·ªìn t·ª´ng b∆∞·ªõc"""
        
        simulation_prompt = f"""
# Y√äU C·∫¶U M√î PH·ªéNG TH·ª∞C THI M√É NGU·ªíN

## Ng√¥n ng·ªØ: {language}

## M√£ ngu·ªìn c·∫ßn m√¥ ph·ªèng:
```{language}
{code}
```

## M·ª©c ƒë·ªô chi ti·∫øt: {detail_level} (low/medium/high)

## Y√äU C·∫¶U M√î PH·ªéNG:
M√¥ ph·ªèng qu√° tr√¨nh th·ª±c thi m√£ ngu·ªìn tr√™n T·ª™NG B∆Ø·ªöC, bao g·ªìm:
1. D√≤ng code th·ª±c thi
2. Tr·∫°ng th√°i bi·∫øn (t√™n, ki·ªÉu, gi√° tr·ªã) sau m·ªói thay ƒë·ªïi
3. Lu·ªìng ƒëi·ªÅu khi·ªÉn (if/else, loop, return)
4. C·∫•u tr√∫c b·ªô nh·ªõ (stack, heap cho C ho·∫∑c c√°c ƒë·ªëi t∆∞·ª£ng cho Python)

## Chi ti·∫øt d·ª±a tr√™n m·ª©c ƒë·ªô:
- LOW: Ch·ªâ th·ªÉ hi·ªán c√°c bi·∫øn quan tr·ªçng v√† lu·ªìng ƒëi·ªÅu khi·ªÉn
- MEDIUM: Th√™m th√¥ng tin v·ªÅ t·∫•t c·∫£ bi·∫øn v√† stack ƒë∆°n gi·∫£n
- HIGH: Chi ti·∫øt ƒë·∫ßy ƒë·ªß v·ªÅ b·ªô nh·ªõ, con tr·ªè (cho C), v√† c√°c ƒë·ªëi t∆∞·ª£ng (cho Python)

## ƒê·ªäNH D·∫†NG PH·∫¢N H·ªíI:
T·∫°o b·∫£ng m√¥ ph·ªèng v·ªõi c√°c c·ªôt: B∆∞·ªõc, D√≤ng code, Bi·∫øn ƒë∆∞·ª£c thay ƒë·ªïi, Tr·∫°ng th√°i b·ªô nh·ªõ, Ghi ch√∫.
S·ª≠ d·ª•ng markdown ƒë·ªÉ ƒë·ªãnh d·∫°ng.
"""
        
        simulation_response = self.gemini_client.query(simulation_prompt)
        return simulation_response
    
    def suggest_test_cases(self, language: str, code: str, requirement: str) -> str:
        """ƒê·ªÅ xu·∫•t test case cho m√£ ngu·ªìn"""
        
        test_case_prompt = f"""
# Y√äU C·∫¶U SINH TEST CASE

## Ng√¥n ng·ªØ: {language}

## M√¥ t·∫£ y√™u c·∫ßu:
{requirement}

## M√£ ngu·ªìn:
```{language}
{code}
```

## Y√äU C·∫¶U TEST CASE:
1. T·∫°o c√°c test case bao ph·ªß c√°c tr∆∞·ªùng h·ª£p:
   - C∆° b·∫£n (happy path)
   - Bi√™n (boundary values)
   - Ngo·∫°i l·ªá (exceptions, error cases)
   
2. ƒê·ªãnh d·∫°ng test case ph√π h·ª£p v·ªõi ng√¥n ng·ªØ:
   - Python: unittest v√† pytest
   - C: assert statements

3. Gi·∫£i th√≠ch m·ª•c ƒë√≠ch c·ªßa t·ª´ng test case

## ƒê·ªäNH D·∫†NG PH·∫¢N H·ªíI:
- Danh s√°ch c√°c test case v·ªõi input, expected output
- Code test ƒë·∫ßy ƒë·ªß, c√≥ th·ªÉ ch·∫°y ƒë∆∞·ª£c
- Gi·∫£i th√≠ch ng·∫Øn g·ªçn t·ª´ng test case
"""
        
        test_case_response = self.gemini_client.query(test_case_prompt)
        return test_case_response

class SmartProgrammingAssistant:
    """Tr·ª£ l√Ω l·∫≠p tr√¨nh th√¥ng minh - l·ªõp ch√≠nh c·ªßa ·ª©ng d·ª•ng"""
    
    def __init__(self, api_key: str):
        """Kh·ªüi t·∫°o tr·ª£ l√Ω v·ªõi API key"""
        self.api_key = api_key
        self.gemini_client = GeminiClient(api_key)
        self.code_analyzer = CodeAnalyzer(self.gemini_client)
        self.current_code = {}  # L∆∞u tr·ªØ m√£ ngu·ªìn hi·ªán t·∫°i theo ng√¥n ng·ªØ
        self.code_history = {}  # L∆∞u tr·ªØ l·ªãch s·ª≠ c√°c phi√™n b·∫£n m√£ ngu·ªìn
        self.current_requirements = ""  # L∆∞u tr·ªØ y√™u c·∫ßu hi·ªán t·∫°i
        
        # Kh·ªüi t·∫°o system prompt
        self._initialize_system_prompt()
    
    def _initialize_system_prompt(self):
        """Kh·ªüi t·∫°o system prompt cho Gemini"""
        system_prompt = """
# TR·ª¢ L√ù L·∫¨P TR√åNH TH√îNG MINH

B·∫°n l√† m·ªôt tr·ª£ l√Ω l·∫≠p tr√¨nh th√¥ng minh, chuy√™n h·ªó tr·ª£ ph√¢n t√≠ch, debug v√† t·ªëi ∆∞u h√≥a m√£ ngu·ªìn.

## VAI TR√í
- Ph√°t hi·ªán v√† gi·∫£i th√≠ch l·ªói trong m√£ ngu·ªìn (C v√† Python)
- M√¥ ph·ªèng qu√° tr√¨nh th·ª±c thi t·ª´ng b∆∞·ªõc
- Ph√¢n t√≠ch logic v√† hi·ªáu su·∫•t m√£
- ƒê·ªÅ xu·∫•t c·∫£i ti·∫øn v√† t·ªëi ∆∞u h√≥a
- Sinh test case v√† ki·ªÉm th·ª≠

## NGUY√äN T·∫ÆC
- Gi·∫£i th√≠ch m·ªçi v·∫•n ƒë·ªÅ v√† gi·∫£i ph√°p m·ªôt c√°ch chi ti·∫øt, r√µ r√†ng
- S·ª≠ d·ª•ng ng√¥n ng·ªØ d·ªÖ hi·ªÉu, ph√π h·ª£p v·ªõi m·ªçi tr√¨nh ƒë·ªô
- Cung c·∫•p m√£ ngu·ªìn ƒë√£ s·ª≠a l·ªói v√† ƒë∆∞·ª£c t·ªëi ∆∞u
- Ph√¢n t√≠ch s√¢u c√°c v·∫•n ƒë·ªÅ ph·ª©c t·∫°p

## ƒê·ªäNH D·∫†NG PH·∫¢N H·ªíI
- S·ª≠ d·ª•ng markdown ƒë·ªÉ ƒë·ªãnh d·∫°ng ph·∫£n h·ªìi
- T·ªï ch·ª©c th√¥ng tin theo c·∫•u tr√∫c r√µ r√†ng
- Highlight code v√† l·ªói ƒë·ªÉ d·ªÖ nh·∫≠n bi·∫øt
- S·ª≠ d·ª•ng b·∫£ng v√† bi·ªÉu ƒë·ªì khi c·∫ßn thi·∫øt
"""
        
        # Th√™m system prompt v√†o l·ªãch s·ª≠
        self.gemini_client.add_to_history("user", system_prompt)
        self.gemini_client.add_to_history("model", "T√¥i s·∫Ω l√†m vi·ªác nh∆∞ m·ªôt tr·ª£ l√Ω l·∫≠p tr√¨nh th√¥ng minh, tu√¢n theo c√°c nguy√™n t·∫Øc v√† h∆∞·ªõng d·∫´n ƒë√£ n√™u.")
    
    def set_requirements(self, requirements: str):
        """C·∫≠p nh·∫≠t y√™u c·∫ßu ƒë·ªÅ b√†i"""
        self.current_requirements = requirements
        
        # Th√™m y√™u c·∫ßu v√†o l·ªãch s·ª≠
        requirements_prompt = f"""
# Y√äU C·∫¶U ƒê·ªÄ B√ÄI

{requirements}

H√£y ph√¢n t√≠ch y√™u c·∫ßu n√†y v√† cho t√¥i bi·∫øt c√°c ƒëi·ªÉm ch√≠nh c·∫ßn l∆∞u √Ω.
"""
        
        self.gemini_client.add_to_history("user", requirements_prompt)
        analysis_response = self.gemini_client.query(requirements_prompt)
        
        return analysis_response
    
    def add_code(self, language: str, code: str, filename: str = None):
        """Th√™m m√£ ngu·ªìn v√†o tr·ª£ l√Ω"""
        if language.lower() not in Config.SUPPORTED_LANGUAGES:
            return f"Ng√¥n ng·ªØ '{language}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. C√°c ng√¥n ng·ªØ h·ªó tr·ª£: {', '.join(Config.SUPPORTED_LANGUAGES)}"
        
        # L∆∞u l·ªãch s·ª≠ n·∫øu ƒë√£ c√≥ m√£ ngu·ªìn tr∆∞·ªõc ƒë√≥
        if language in self.current_code:
            if language not in self.code_history:
                self.code_history[language] = []
            self.code_history[language].append(self.current_code[language])
        
        # C·∫≠p nh·∫≠t m√£ ngu·ªìn hi·ªán t·∫°i
        self.current_code[language] = {
            "code": code,
            "filename": filename or f"code.{language.lower()}"
        }
        
        # Th√™m code v√†o l·ªãch s·ª≠
        code_prompt = f"""
# M√É NGU·ªíN M·ªöI

## Ng√¥n ng·ªØ: {language}
## T√™n file: {filename or f"code.{language.lower()}"}

```{language}
{code}
```

H√£y ph√¢n t√≠ch m√£ ngu·ªìn n√†y v√† cho t√¥i bi·∫øt n√≥ l√†m g√¨.
"""
        
        self.gemini_client.add_to_history("user", code_prompt)
        analysis_response = self.gemini_client.query(code_prompt)
        
        return analysis_response
    
    def analyze_current_code(self, language: str):
        """Ph√¢n t√≠ch m√£ ngu·ªìn hi·ªán t·∫°i"""
        if language.lower() not in self.current_code:
            return f"Kh√¥ng c√≥ m√£ ngu·ªìn {language} ƒë·ªÉ ph√¢n t√≠ch. Vui l√≤ng th√™m m√£ ngu·ªìn tr∆∞·ªõc."
        
        code_data = self.current_code[language]
        analysis_result = self.code_analyzer.analyze_code(
            language, 
            code_data["code"],
            self.current_requirements
        )
        
        # T·∫°o markdown ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£
        markdown_result = self._format_analysis_result(analysis_result, language)
        
        return markdown_result
    
    def _format_analysis_result(self, analysis_result: Dict[str, Any], language: str) -> str:
        """ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ ph√¢n t√≠ch th√†nh markdown"""
        md = "# K·∫øt Qu·∫£ Ph√¢n T√≠ch M√£ Ngu·ªìn\n\n"
        
        # Th√™m ph·∫ßn header
        md += f"## T·ªïng Quan\n\n"
        
        # Th√™m th√¥ng tin v·ªÅ c√∫ ph√°p
        syntax_check = analysis_result["syntax_check"]
        execution_result = analysis_result["execution_result"]
        analysis = analysis_result["analysis"]
        
        # Tr·∫°ng th√°i c√∫ ph√°p
        syntax_status = "‚úÖ Kh√¥ng c√≥ l·ªói c√∫ ph√°p" if syntax_check["status"] == "success" else f"‚ùå C√≥ l·ªói c√∫ ph√°p"
        md += f"- **C√∫ ph√°p:** {syntax_status}\n"
        
        # Tr·∫°ng th√°i th·ª±c thi
        execution_status = "‚úÖ Th·ª±c thi th√†nh c√¥ng" if execution_result["status"] == "success" else f"‚ùå L·ªói khi th·ª±c thi"
        md += f"- **Th·ª±c thi:** {execution_status}\n"
        
        # ƒê·ªô ph√π h·ª£p v·ªõi y√™u c·∫ßu
        requirement_compliance = analysis.get("requirement_compliance", "Kh√¥ng x√°c ƒë·ªãnh")
        md += f"- **ƒê√°p ·ª©ng y√™u c·∫ßu:** {requirement_compliance}\n\n"
        
        # Chi ti·∫øt c√°c l·ªói
        md += "## Chi Ti·∫øt C√°c V·∫•n ƒê·ªÅ\n\n"
        
        # L·ªói c√∫ ph√°p
        md += "### L·ªói C√∫ Ph√°p\n\n"
        syntax_issues = analysis.get("syntax_issues", [])
        if not syntax_issues:
            md += "Kh√¥ng ph√°t hi·ªán l·ªói c√∫ ph√°p.\n\n"
        else:
            for issue in syntax_issues:
                md += f"- **D√≤ng {issue.get('line', 'N/A')}:** {issue.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£')}\n"
                md += f"  - **C√°ch s·ª≠a:** {issue.get('fix', 'Kh√¥ng c√≥ g·ª£i √Ω')}\n\n"
        
        # L·ªói logic
        md += "### L·ªói Logic\n\n"
        logic_issues = analysis.get("logic_issues", [])
        if not logic_issues:
            md += "Kh√¥ng ph√°t hi·ªán l·ªói logic.\n\n"
        else:
            for issue in logic_issues:
                affected_lines = issue.get('affected_lines', ['N/A'])
                if isinstance(affected_lines, list):
                    lines_str = ", ".join(str(line) for line in affected_lines)
                else:
                    lines_str = str(affected_lines)
                
                md += f"- **D√≤ng {lines_str}:** {issue.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£')}\n"
                md += f"  - **C√°ch s·ª≠a:** {issue.get('fix', 'Kh√¥ng c√≥ g·ª£i √Ω')}\n\n"
        
        # L·ªói runtime
        md += "### L·ªói Runtime\n\n"
        runtime_issues = analysis.get("runtime_issues", [])
        if not runtime_issues:
            md += "Kh√¥ng ph√°t hi·ªán l·ªói runtime.\n\n"
        else:
            for issue in runtime_issues:
                md += f"- **V·∫•n ƒë·ªÅ:** {issue.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£')}\n"
                md += f"  - **C√°ch s·ª≠a:** {issue.get('fix', 'Kh√¥ng c√≥ g·ª£i √Ω')}\n\n"
        
        # M√£ ngu·ªìn ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t s·ª≠a
        suggested_fixes = analysis.get("suggested_fixes", "")
        if suggested_fixes:
            md += "## M√£ Ngu·ªìn ƒê√£ S·ª≠a\n\n"
            md += f"```{language}\n{suggested_fixes}\n```\n\n"
        
        # Gi·∫£i th√≠ch
        explanation = analysis.get("explanation", "")
        if explanation:
            md += "## Gi·∫£i Th√≠ch Chi Ti·∫øt\n\n"
            md += f"{explanation}\n\n"
        
        # ƒê·ªÅ xu·∫•t t·ªëi ∆∞u h√≥a
        md += "## ƒê·ªÅ Xu·∫•t T·ªëi ∆Øu H√≥a\n\n"
        optimizations = analysis.get("optimizations", [])
        if not optimizations:
            md += "Kh√¥ng c√≥ ƒë·ªÅ xu·∫•t t·ªëi ∆∞u h√≥a.\n\n"
        else:
            for i, opt in enumerate(optimizations, 1):
                md += f"{i}. {opt}\n"
        
        return md
    
    def simulate_execution(self, language: str, detail_level: str = None):
        """M√¥ ph·ªèng th·ª±c thi m√£ ngu·ªìn t·ª´ng b∆∞·ªõc"""
        if language.lower() not in self.current_code:
            return f"Kh√¥ng c√≥ m√£ ngu·ªìn {language} ƒë·ªÉ m√¥ ph·ªèng. Vui l√≤ng th√™m m√£ ngu·ªìn tr∆∞·ªõc."
        
        detail_level = detail_level or Config.DEFAULT_DETAIL_LEVEL
        code_data = self.current_code[language]
        
        simulation_result = self.code_analyzer.simulate_execution(
            language,
            code_data["code"],
            detail_level
        )
        
        return simulation_result
    
    def generate_test_cases(self, language: str):
        """Sinh test case cho m√£ ngu·ªìn hi·ªán t·∫°i"""
        if language.lower() not in self.current_code:
            return f"Kh√¥ng c√≥ m√£ ngu·ªìn {language} ƒë·ªÉ sinh test case. Vui l√≤ng th√™m m√£ ngu·ªìn tr∆∞·ªõc."
        
        code_data = self.current_code[language]
        
        # G·ªçi API ƒë·ªÉ sinh test case
        test_cases_result = self.code_analyzer.suggest_test_cases(
            language,
            code_data["code"],
            self.current_requirements
        )
        
        # Th·ª±c thi ƒë·ªÉ t·∫°o file test
        CodeExecutor.generate_test_cases(
            language,
            code_data["code"],
            self.current_requirements
        )
        
        return test_cases_result
    
    def compare_versions(self, language: str, version1: int = -2, version2: int = -1):
        """So s√°nh hai phi√™n b·∫£n m√£ ngu·ªìn"""
        if language.lower() not in self.code_history or len(self.code_history[language]) < 2:
            return f"Kh√¥ng ƒë·ªß phi√™n b·∫£n m√£ ngu·ªìn {language} ƒë·ªÉ so s√°nh. C·∫ßn √≠t nh·∫•t 2 phi√™n b·∫£n."
        
        # L·∫•y phi√™n b·∫£n code
        history = self.code_history[language]
        
        # X·ª≠ l√Ω ch·ªâ s·ªë √¢m
        if version1 < 0:
            version1 = len(history) + version1
        if version2 < 0:
            version2 = len(history) + version2
        
        # Ki·ªÉm tra ph·∫°m vi
        if version1 < 0 or version1 >= len(history) or version2 < 0 or version2 >= len(history):
            return f"Ch·ªâ s·ªë phi√™n b·∫£n kh√¥ng h·ª£p l·ªá. Ph·∫°m vi h·ª£p l·ªá: 0-{len(history)-1}."
        
        # So s√°nh
        old_code = history[version1]["code"]
        new_code = history[version2]["code"]
        diff = Utils.compare_code_versions(old_code, new_code)
        
        # T·∫°o diff ƒë·∫πp ƒë·ªÉ hi·ªÉn th·ªã
        html_diff = Utils.create_displayable_diff(old_code, new_code)
        
        return {
            "text_diff": diff,
            "html_diff": html_diff
        }
    
    def update_from_file(self, file_upload_path: str):
        """C·∫≠p nh·∫≠t m√£ ngu·ªìn t·ª´ file ƒë∆∞·ª£c t·∫£i l√™n"""
        file_ext = file_upload_path.split('.')[-1].lower()
        
        if file_ext == 'zip':
            # Gi·∫£i n√©n file zip
            extract_dir = os.path.join(Config.TEMP_DIR, "extracted")
            os.makedirs(extract_dir, exist_ok=True)
            
            extracted_files = Utils.unzip_file(file_upload_path, extract_dir)
            
            result = {
                "message": f"ƒê√£ gi·∫£i n√©n {len(extracted_files)} file.",
                "files": []
            }
            
            # T√¨m c√°c file theo ng√¥n ng·ªØ ƒë∆∞·ª£c h·ªó tr·ª£
            for language in Config.SUPPORTED_LANGUAGES:
                relevant_files = Utils.get_relevant_language_files(extract_dir, language)
                
                for file_path in relevant_files:
                    file_content = Utils.read_file(file_path)
                    file_name = os.path.basename(file_path)
                    
                    # Th√™m m√£ ngu·ªìn v√†o tr·ª£ l√Ω
                    analysis = self.add_code(language, file_content, file_name)
                    
                    result["files"].append({
                        "path": file_path,
                        "language": language,
                        "name": file_name,
                        "analysis": analysis
                    })
            
            return result
        
        elif file_ext in ['c', 'h']:
            # File C
            file_content = Utils.read_file(file_upload_path)
            file_name = os.path.basename(file_upload_path)
            analysis = self.add_code("c", file_content, file_name)
            
            return {
                "message": f"ƒê√£ ƒë·ªçc file {file_name}",
                "analysis": analysis
            }
        
        elif file_ext == 'py':
            # File Python
            file_content = Utils.read_file(file_upload_path)
            file_name = os.path.basename(file_upload_path)
            analysis = self.add_code("python", file_content, file_name)
            
            return {
                "message": f"ƒê√£ ƒë·ªçc file {file_name}",
                "analysis": analysis
            }
        
        else:
            return {
                "message": f"Kh√¥ng h·ªó tr·ª£ file c√≥ ph·∫ßn m·ªü r·ªông '{file_ext}'.",
                "supported_extensions": [".c", ".h", ".py", ".zip"]
            }
    
    def explain_code(self, language: str):
        """Gi·∫£i th√≠ch m√£ ngu·ªìn chi ti·∫øt"""
        if language.lower() not in self.current_code:
            return f"Kh√¥ng c√≥ m√£ ngu·ªìn {language} ƒë·ªÉ gi·∫£i th√≠ch. Vui l√≤ng th√™m m√£ ngu·ªìn tr∆∞·ªõc."
        
        code_data = self.current_code[language]
        
        explain_prompt = f"""
# Y√äU C·∫¶U GI·∫¢I TH√çCH M√É NGU·ªíN

## Ng√¥n ng·ªØ: {language}

## M√£ ngu·ªìn:
```{language}
{code_data['code']}
```

## Y√äU C·∫¶U:
1. Gi·∫£i th√≠ch t·ªïng quan v·ªÅ m·ª•c ƒë√≠ch v√† ch·ª©c nƒÉng c·ªßa m√£ ngu·ªìn
2. M√¥ t·∫£ c·∫•u tr√∫c v√† t·ªï ch·ª©c c·ªßa m√£
3. Gi·∫£i th√≠ch t·ª´ng ph·∫ßn, h√†m, v√† thu·∫≠t to√°n quan tr·ªçng
4. Ch·ªâ ra c√°c ƒëi·ªÉm m·∫°nh v√† h·∫°n ch·∫ø c·ªßa m√£
5. ƒê·ªÅ xu·∫•t c√°ch c·∫£i thi·ªán v·ªÅ m·∫∑t c·∫•u tr√∫c v√† t·ªï ch·ª©c

## ƒê·ªäNH D·∫†NG PH·∫¢N H·ªíI:
- T·∫°o ph·∫£n h·ªìi d∆∞·ªõi d·∫°ng markdown
- Ph√¢n chia th√†nh c√°c ph·∫ßn r√µ r√†ng
- S·ª≠ d·ª•ng code snippets khi c·∫ßn thi·∫øt
- Gi·∫£i th√≠ch c√°c thu·∫≠t ng·ªØ k·ªπ thu·∫≠t
"""
        
        explanation = self.gemini_client.query(explain_prompt)
        return explanation

# ===== PH·∫¶N GIAO DI·ªÜN =====

class UI:
    """X·ª≠ l√Ω giao di·ªán ng∆∞·ªùi d√πng"""
    
    @staticmethod
    def create_api_key_input():
        """T·∫°o input cho API key"""
        display(HTML("""
        <div style="margin: 10px 0; padding: 10px; border: 1px solid #ddd; border-radius: 5px; background-color: #f9f9f9;">
            <h3 style="margin-top: 0;">Nh·∫≠p API Key c·ªßa Gemini</h3>
            <input type="password" id="api_key_input" style="width: 100%; padding: 8px; margin: 5px 0;">
            <button id="save_api_key" style="padding: 8px 15px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer;">L∆∞u</button>
            <p style="font-size: 12px; color: #666;">API Key s·∫Ω ƒë∆∞·ª£c l∆∞u trong bi·∫øn v√† kh√¥ng hi·ªÉn th·ªã l·∫°i</p>
            
            <script>
            document.getElementById('save_api_key').addEventListener('click', function() {
                var api_key = document.getElementById('api_key_input').value;
                if (api_key) {
                    google.colab.kernel.invokeFunction('notebook.SaveAPIKey', [api_key], {});
                    document.getElementById('api_key_input').value = '';
                }
            });
            </script>
        </div>
        """))
    
    @staticmethod
    def create_main_interface():
        """T·∫°o giao di·ªán ch√≠nh"""
        display(HTML("""
        <div style="margin: 20px 0; padding: 20px; border: 1px solid #ddd; border-radius: 8px; background-color: #f9f9f9;">
            <h2 style="text-align: center; margin-top: 0; color: #333;">ü§ñ Tr·ª£ L√Ω L·∫≠p Tr√¨nh Th√¥ng Minh v1.1</h2>
            
            <div style="margin: 20px 0;">
                <h3>üìù Nh·∫≠p Y√™u C·∫ßu ƒê·ªÅ B√†i</h3>
                <textarea id="requirements_input" style="width: 100%; height: 100px; padding: 10px; margin: 5px 0; border-radius: 5px;"></textarea>
                <button id="save_requirements" style="padding: 8px 15px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer;">L∆∞u Y√™u C·∫ßu</button>
            </div>
            
            <div style="margin: 20px 0;">
                <h3>üíª Nh·∫≠p M√£ Ngu·ªìn</h3>
                <select id="language_select" style="padding: 8px; margin: 5px 0; border-radius: 5px;">
                    <option value="python">Python</option>
                    <option value="c">C</option>
                </select>
                <textarea id="code_input" style="width: 100%; height: 200px; padding: 10px; margin: 5px 0; border-radius: 5px; font-family: monospace;"></textarea>
                <button id="save_code" style="padding: 8px 15px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer;">L∆∞u M√£ Ngu·ªìn</button>
            </div>
            
            <div style="margin: 20px 0;">
                <h3>üìä C√¥ng C·ª•</h3>
                <button id="analyze_code" style="padding: 8px 15px; background-color: #2196F3; color: white; border: none; border-radius: 4px; cursor: pointer; margin-right: 10px;">Ph√¢n T√≠ch M√£ Ngu·ªìn</button>
                <button id="simulate_execution" style="padding: 8px 15px; background-color: #2196F3; color: white; border: none; border-radius: 4px; cursor: pointer; margin-right: 10px;">M√¥ Ph·ªèng Th·ª±c Thi</button>
                <button id="generate_test_cases" style="padding: 8px 15px; background-color: #2196F3; color: white; border: none; border-radius: 4px; cursor: pointer; margin-right: 10px;">Sinh Test Case</button>
                <button id="explain_code" style="padding: 8px 15px; background-color: #2196F3; color: white; border: none; border-radius: 4px; cursor: pointer;">Gi·∫£i Th√≠ch M√£ Ngu·ªìn</button>
            </div>
            
            <div style="margin: 20px 0;">
                <h3>üìÅ T·∫£i L√™n File</h3>
                <input type="file" id="file_upload" style="margin: 5px 0;">
                <button id="process_file" style="padding: 8px 15px; background-color: #FF9800; color: white; border: none; border-radius: 4px; cursor: pointer;">X·ª≠ L√Ω File</button>
            </div>
            
            <script>
            document.getElementById('save_requirements').addEventListener('click', function() {
                var requirements = document.getElementById('requirements_input').value;
                if (requirements) {
                    google.colab.kernel.invokeFunction('notebook.SaveRequirements', [requirements], {});
                }
            });
            
            document.getElementById('save_code').addEventListener('click', function() {
                var code = document.getElementById('code_input').value;
                var language = document.getElementById('language_select').value;
                if (code && language) {
                    google.colab.kernel.invokeFunction('notebook.SaveCode', [language, code], {});
                }
            });
            
            document.getElementById('analyze_code').addEventListener('click', function() {
                var language = document.getElementById('language_select').value;
                google.colab.kernel.invokeFunction('notebook.AnalyzeCode', [language], {});
            });
            
            document.getElementById('simulate_execution').addEventListener('click', function() {
                var language = document.getElementById('language_select').value;
                google.colab.kernel.invokeFunction('notebook.SimulateExecution', [language], {});
            });
            
            document.getElementById('generate_test_cases').addEventListener('click', function() {
                var language = document.getElementById('language_select').value;
                google.colab.kernel.invokeFunction('notebook.GenerateTestCases', [language], {});
            });
            
            document.getElementById('explain_code').addEventListener('click', function() {
                var language = document.getElementById('language_select').value;
                google.colab.kernel.invokeFunction('notebook.ExplainCode', [language], {});
            });
            
            document.getElementById('process_file').addEventListener('click', function() {
                var fileInput = document.getElementById('file_upload');
                if (fileInput.files.length > 0) {
                    google.colab.kernel.invokeFunction('notebook.ProcessFile', [], {});
                } else {
                    alert('Vui l√≤ng ch·ªçn file tr∆∞·ªõc.');
                }
            });
            </script>
        </div>
        """))

# ===== PH·∫¶N KH·ªûI ƒê·ªòNG ·ª®NG D·ª§NG =====

def run_application():
    """Kh·ªüi ƒë·ªông ·ª©ng d·ª•ng"""
    
    # Hi·ªÉn th·ªã form nh·∫≠p API key
    UI.create_api_key_input()
    
    # T·∫°o bi·∫øn to√†n c·ª•c cho assistant
    global assistant
    assistant = None
    
    # ƒêƒÉng k√Ω callback cho API key
    from google.colab import output
    
    @output.register_callback('notebook.SaveAPIKey')
    def save_api_key(api_key):
        global assistant
        # Kh·ªüi t·∫°o tr·ª£ l√Ω
        assistant = SmartProgrammingAssistant(api_key)
        
        # X√≥a form API key v√† hi·ªÉn th·ªã giao di·ªán ch√≠nh
        clear_output()
        print("‚úÖ API Key ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!")
        UI.create_main_interface()
    
    @output.register_callback('notebook.SaveRequirements')
    def save_requirements(requirements):
        if assistant:
            result = assistant.set_requirements(requirements)
            display(Markdown(result))
        else:
            print("‚ùå Vui l√≤ng nh·∫≠p API Key tr∆∞·ªõc.")
    
    @output.register_callback('notebook.SaveCode')
    def save_code(language, code):
        if assistant:
            result = assistant.add_code(language, code)
            display(Markdown(result))
        else:
            print("‚ùå Vui l√≤ng nh·∫≠p API Key tr∆∞·ªõc.")
    
    @output.register_callback('notebook.AnalyzeCode')
    def analyze_code(language):
        if assistant:
            result = assistant.analyze_current_code(language)
            display(Markdown(result))
        else:
            print("‚ùå Vui l√≤ng nh·∫≠p API Key tr∆∞·ªõc.")
    
    @output.register_callback('notebook.SimulateExecution')
    def simulate_execution(language):
        if assistant:
            result = assistant.simulate_execution(language)
            display(Markdown(result))
        else:
            print("‚ùå Vui l√≤ng nh·∫≠p API Key tr∆∞·ªõc.")
    
    @output.register_callback('notebook.GenerateTestCases')
    def generate_test_cases(language):
        if assistant:
            result = assistant.generate_test_cases(language)
            display(Markdown(result))
        else:
            print("‚ùå Vui l√≤ng nh·∫≠p API Key tr∆∞·ªõc.")
    
    @output.register_callback('notebook.ExplainCode')
    def explain_code(language):
        if assistant:
            result = assistant.explain_code(language)
            display(Markdown(result))
        else:
            print("‚ùå Vui l√≤ng nh·∫≠p API Key tr∆∞·ªõc.")
    
    @output.register_callback('notebook.ProcessFile')
    def process_file():
        from google.colab import files
        uploaded = files.upload()
        
        if assistant:
            for filename, content in uploaded.items():
                # L∆∞u file t·∫°m th·ªùi
                temp_file = os.path.join(Config.TEMP_DIR, filename)
                with open(temp_file, 'wb') as f:
                    f.write(content)
                
                # X·ª≠ l√Ω file
                result = assistant.update_from_file(temp_file)
                print(f"‚úÖ ƒê√£ x·ª≠ l√Ω file: {filename}")
                
                if isinstance(result, dict) and "analysis" in result:
                    display(Markdown(result["analysis"]))
        else:
            print("‚ùå Vui l√≤ng nh·∫≠p API Key tr∆∞·ªõc.")

# Ch·∫°y ·ª©ng d·ª•ng khi notebook ƒë∆∞·ª£c kh·ªüi ƒë·ªông
if __name__ == "__main__":
    run_application()
